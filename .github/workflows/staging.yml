name: CI STAGING

on:
  push:
    branches:
      - development

jobs:
  build:
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Generate .env file
        run: |
          if [ ! -f .env ]; then
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env
            echo "REDIS_PASS=${{ secrets.REDIS_PASS }}" >> .env
            echo "API_PORT=${{ secrets.API_PORT }}" >> .env
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
            echo "CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" >> .env
            echo "CLOUDFLARE_R2_ACCESS_ID=${{ secrets.CLOUDFLARE_R2_ACCESS_ID }}" >> .env
            echo "CLOUDFLARE_R2_ACCESS_KEY=${{ secrets.CLOUDFLARE_R2_ACCESS_KEY }}" >> .env
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
            echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
            echo "S3_BUCKET=${{ secrets.S3_BUCKET }}" >> .env
            echo "MAILGUN_DOMAIN=${{ secrets.MAILGUN_DOMAIN }}" >> .env
            echo "MAILGUN_API_KEY=${{ secrets.MAILGUN_API_KEY }}" >> .env
            echo "MAILGUN_SENDER_EMAIL=${{ secrets.MAILGUN_SENDER_EMAIL }}" >> .env
            echo "ENV=${{ secrets.ENV }}" >> .env
            echo "GH_ACCESS_TOKEN=${{ secrets.GH_ACCESS_TOKEN }}" >> .env
            echo "HUNTER_API_KEY=${{ secrets.HUNTER_API_KEY }}" >> .env
          fi

      - name: Ensure .env file exists
        run: touch .env

      - name: Connect to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Connect to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/api-pufa-computing:beta
            ghcr.io/${{ github.actor }}/api-pufa-computing:beta

  deployments:
    needs: build
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Staging
        uses: appleboy/ssh-action@master
        with:
            host: ${{ secrets.SERVER }}
            username: ${{ secrets.SERVER_USERNAME }}
            password: ${{ secrets.SERVER_PASSWORD }}
            port: ${{ secrets.SERVER_PORT }}
            script: |
              whoami
              docker stop staging-api-computing || true && docker rm staging-api-computing || true
              docker pull ${{ vars.IMAGE_NAME}}
              docker run -d -p ${{ secrets.API_PORT }}:8080 --name staging-api-computing ${{ vars.IMAGE_NAME}}