name: CI PRODUCTION

on:
  push:
    branches:
      - master
      - next
      - next-major
      - beta
      - alpha
      - '+([0-9])?(.{+([0-9]),x}).x'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        id: semantic
        with:
          branches: |
            [
              '+([0-9])?(.{+([0-9]),x}).x',
              'master',
              'next',
              'next-major',
              {
                name: 'beta',
                prerelease: true
              },
              {
                name: 'alpha',
                prerelease: true
              }
                    ]
          extra_plugins: |
            - "@semantic-release/changelog"
            - "@semantic-release/git"
            - "@semantic-release/github"
            - "@semantic-release/release-notes-generator"
            - "@semantic-release/commit-analyzer"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Do something when a new release published
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          echo ${{ steps.semantic.outputs.new_release_version }}
          echo ${{ steps.semantic.outputs.new_release_major_version }}
          echo ${{ steps.semantic.outputs.new_release_minor_version }}
          echo ${{ steps.semantic.outputs.new_release_patch_version }}
    outputs:
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_major_version: ${{ steps.semantic.outputs.new_release_major_version }}
      new_release_minor_version: ${{ steps.semantic.outputs.new_release_minor_version }}
      new_release_patch_version: ${{ steps.semantic.outputs.new_release_patch_version }}
  build:
    environment: production
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Generate .env file
        run: |
          if [ ! -f .env ]; then
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env
            echo "REDIS_PASS=${{ secrets.REDIS_PASS }}" >> .env
            echo "API_PORT=${{ secrets.API_PORT }}" >> .env
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
            echo "CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" >> .env
            echo "CLOUDFLARE_R2_ACCESS_ID=${{ secrets.CLOUDFLARE_R2_ACCESS_ID }}" >> .env
            echo "CLOUDFLARE_R2_ACCESS_KEY=${{ secrets.CLOUDFLARE_R2_ACCESS_KEY }}" >> .env
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
            echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
            echo "S3_BUCKET=${{ secrets.S3_BUCKET }}" >> .env
            echo "MAILGUN_DOMAIN=${{ secrets.MAILGUN_DOMAIN }}" >> .env
            echo "MAILGUN_API_KEY=${{ secrets.MAILGUN_API_KEY }}" >> .env
            echo "MAILGUN_SENDER_EMAIL=${{ secrets.MAILGUN_SENDER_EMAIL }}" >> .env
            echo "ENV=${{ secrets.ENV }}" >> .env
            echo "GH_ACCESS_TOKEN=${{ secrets.GH_ACCESS_TOKEN }}" >> .env
            echo "HUNTER_API_KEY=${{ secrets.HUNTER_API_KEY }}" >> .env
          fi

      - name: Ensure .env file exists
        run: touch .env

      - name: Connect to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/api-pufa-computing:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/api-pufa-computing:${{ needs.release.new_release_version }}

      - name: Push to Github Container Registry
        run: |
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GH_ACCESS_TOKEN }}
          docker tag ${{ secrets.DOCKER_USERNAME }}/api-pufa-computing:${{ github.sha }} ghcr.io/${{ github.actor }}/api-pufa-computing:${{ github.sha }}
          docker push ghcr.io/${{ github.actor }}/api-pufa-computing:${{ github.sha }}
          docker tag ${{ secrets.DOCKER_USERNAME }}/api-pufa-computing:${{ needs.release.new_release_version }} ghcr.io/${{ github.actor }}/api-pufa-computing:${{ needs.release.new_release_version }}
          docker push ghcr.io/${{ github.actor }}/api-pufa-computing:${{ needs.release.new_release_version }}

      - name: Tag and push latest
        if: github.ref == 'refs/heads/master'
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/api-pufa-computing:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/api-pufa-computing:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/api-pufa-computing:latest
          docker tag ghcr.io/${{ github.actor }}/api-pufa-computing:${{ github.sha }} ghcr.io/${{ github.actor }}/api-pufa-computing:latest
          docker push ghcr.io/${{ github.actor }}/api-pufa-computing:latest

  deployments:
    needs: build
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            whoami
            docker stop api-computing || true && docker rm api-computing || true
            docker pull ${{ vars.IMAGE_NAME}}
            docker run -d -p ${{ secrets.API_PORT }}:8080 --name api-computing ${{ vars.IMAGE_NAME}}
